#!/bin/bash 
# shellcheck disable=1117,2219
#
# Finds all Python scripts and checks the header for a pylint directive.
# If there is one, executes pylint against the script and marks script as
# passed or failed.  If there is no directive, marks the script as skipped.
# Directives look like this:
#
#   #!/usr/bin/bash
#   # vi: set softtabstop=2 ts=2 sw=2 expandtab:
#   # pylint
#
# In order to pass pylint command-line directives, the following may be used:
#
#   # pylintopts: --indent-string='    '
#
# These may also be specified in an RC file pointed to by the environment
# variable $PYLINTRC.

# ----------------------------------------------------------------------------
#                                                                  functions
# ----------------------------------------------------------------------------

# Check for pylint directive in top of script to determine whether script
# is a candidate.
pylint_enabled()
{
  awk '
    # default to not finding directive
    BEGIN {
      rc=1
    }

    # find directive (do NOT check for whitespace or whole word; this check
    # does not so for example "# pylint" will be failed out by
    # pylint as a bad directive
    /^# ?pylint[:$]/ {
      rc=0
    }

    match($0, /^# ?pylintopts: */) {
      rc=0;
      print substr($0, RSTART+RLENGTH);
    }

    # quit on blank lines or blank comments
    /^#?\s*$/ {
      exit
    }

    # quit with exit code (necessary because END clauses always executes)
    END {
      exit rc
    }' "$1"
}

# ----------------------------------------------------------------------------
#                                                             initialization
# ----------------------------------------------------------------------------

# check for pylint binary
if ! which pylint >/dev/null 2>&1
then
  echo "Could not find pylint; exiting"
  exit
fi

# colours are only used in interactive terminal
colours=0
test -t 0 && colours=1

# colours configuration
if (( colours ))
then
  clr_skipped="\\033[33m"
  clr_failed="\\033[31m"
  clr_passed="\\033[32m"
  clr_normal="\\033[39m"
fi

# ----------------------------------------------------------------------------
#                                                                       main
# ----------------------------------------------------------------------------

i=0
skipped=0
passed=0
failed=0

# find every Python script identified by extension
# warning for find disabled; no other way to keep state
# shellcheck disable=2044
for script in $(find . -type f -name \*.py -not -path ./venv/\*)
do
  scripts[$i]=$script
  if pylint_opts=$(pylint_enabled $script)
  then
    if pylint "$pylint_opts" -rn -sn "$script"
    then  
      results[$i]="passed"
      let passed=passed+1
    else 
      results[$i]="failed"
      let failed=failed+1
    fi
  else
    results[$i]="skipped"
    let skipped=skipped+1
  fi
  let i=i+1
done
let total=i

for ((i=0; i<total; i++))
do
  case ${results[$i]} in
    "passed")
      printf "${clr_passed}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
    "skipped")
      printf "${clr_skipped}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
    "failed")
      printf "${clr_failed}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
  esac
done

if (( failed > 0 ))
then
  exit 1
fi

