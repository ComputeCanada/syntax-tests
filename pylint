#!/bin/bash 
# shellcheck disable=1117,2219
#
# Finds all Python scripts and checks the header for a pylint directive.
# If there is one, executes pylint against the script and marks script as
# passed or failed.  If there is no directive, marks the script as skipped.
# Directives look like this:
#
#   #!/usr/bin/bash
#   # vi: set softtabstop=2 ts=2 sw=2 expandtab:
#   # pylint
#
# In order to pass pylint command-line directives, the following may be used:
#
#   # pylintopts: --indent-string='    '
#
# These may also be specified in an RC file pointed to by the environment
# variable $PYLINTRC.

# ----------------------------------------------------------------------------
#                                                              configuration
# ----------------------------------------------------------------------------

LINTCACHE=.lintcache

# ----------------------------------------------------------------------------
#                                                                  functions
# ----------------------------------------------------------------------------

# Check for pylint directive in top of script to determine whether script
# is a candidate.
pylint_enabled()
{
  awk '
    # default to not finding directive
    BEGIN {
      rc=1
    }

    # find directive (do NOT check for whitespace or whole word; this check
    # does not so for example "# pylint" will be failed out by
    # pylint as a bad directive
    /^# ?pylint[:$]/ {
      rc=0
    }

    match($0, /^# ?pylintopts: */) {
      rc=0;
      print substr($0, RSTART+RLENGTH);
    }

    # quit on blank lines or blank comments
    /^#?\s*$/ {
      exit
    }

    # quit with exit code (necessary because END clauses always executes)
    END {
      exit rc
    }' "$1"
}

# ----------------------------------------------------------------------------
#                                                             initialization
# ----------------------------------------------------------------------------

# check for pylint binary
if ! which pylint >/dev/null 2>&1
then
  echo "Could not find pylint; exiting"
  exit
fi

# colours are only used in interactive terminal
colours=0
test -t 0 && colours=1

# colours configuration
if (( colours ))
then
  clr_skipped="\\033[33m"
  clr_failed="\\033[31m"
  clr_passed="\\033[32m"
  clr_normal="\\033[39m"
fi

# ----------------------------------------------------------------------------
#                                                                       main
# ----------------------------------------------------------------------------

i=0
skipped=0
passed=0
failed=0

# check if cache directory exists
if [ -z "$LINTCACHE" ]
then
  LINTCACHE=.lintcache
fi
if [ ! -d $LINTCACHE ]
then
  mkdir -p $LINTCACHE
fi

# find every Python script identified by extension or first line of file
# warning for find disabled; no other way to keep state
# shellcheck disable=2044
#for script in $(find . -type f -not -path '*/venv/*' -not -path "./$LINTCACHE/*" \( -name \*.py -or -exec awk 'BEGIN { result = 1 } NR==1 && /python/ { result=0 } END { exit result }' {} \; \) -print)
for script in $(file $(git ls-files) | awk -F: '/Python/ { print $1 }')
do
  scripts[$i]=$script
  if pylint_opts=$(pylint_enabled $script)
  then
    # determine caching target
    cachee="$LINTCACHE/${script//\//_}"
    if [ $cachee -nt "$script" ]
    then
      result="deja-vu"
      let skipped=skipped+1
    else
      if [ -n "$pylint_opts" ]
      then
        pylint "$pylint_opts" -rn -sn "$script"
      else
        pylint -rn -sn "$script"
      fi
      if (( $? ))
      then
        result="failed"
        let failed=failed+1
      else
        result="passed"
        let passed=passed+1
        touch $cachee
      fi
    fi
  else
    result="skipped"
    let skipped=skipped+1
  fi
  case "$result" in
    "passed"|"deja-vu")
      printf "${clr_passed}% 7s %s${clr_normal}\n" "${result}" "${script}"
      ;;
    "skipped")
      printf "${clr_skipped}% 7s %s${clr_normal}\n" "${result}" "${script}"
      ;;
    "failed")
      printf "${clr_failed}% 7s %s${clr_normal}\n" "${result}" "${script}"
      ;;
  esac
  results[$i]="$result"
  let i=i+1
done
let total=i

if (( failed > 0 ))
then
  exit 1
fi

