#!/bin/bash 
# shellcheck disable=1117,2219
#
# Finds all sh-family scripts and checks the header for a shellcheck directive.
# If there is one, executes shellcheck against the script and marks script as
# passed or failed.  If there is no directive, marks the script as skipped.
# Directives look like this:
#
#   #!/usr/bin/bash
#   # vi: set softtabstop=2 ts=2 sw=2 expandtab:
#   # shellcheck disable=2162,2048
#
# This shellcheck directive ignores violations 2162 and 2048.
#
# This shellcheck directive is only available in shellcheck v4.4+, and in 
# versions prior to 4.6, must be the first line after the shebang.  See 
# initial versions of this script for compatibility with older shellcheck.

# check for shellcheck binary
if ! which shellcheck >/dev/null 2>&1
then
  echo "Could not find shellcheck; exiting"
  exit
fi

# colours are only used in interactive terminal
colours=0
test -t 0 && colours=1

# colours configuration
if (( colours ))
then
  clr_skipped="\\033[33m"
  clr_failed="\\033[31m"
  clr_passed="\\033[32m"
  clr_normal="\\033[39m"
fi

i=0
skipped=0
passed=0
failed=0

# find every (ba|k|)sh script identified by extension
# warning for find disabled; no other way to keep state
# shellcheck disable=2044
for script in $(find . -type f -name \*.sh)
do
  scripts[$i]=$script 
  if awk 'BEGIN { rc=1 } /^# shellcheck[ $]/ { rc=0; exit } /^#?\s*$/ { exit } END { exit rc }' "$script"
  then
    if shellcheck "$script"
    then  
      results[$i]="passed"
      let passed=passed+1
    else 
      results[$i]="failed"
      let failed=failed+1
    fi
  else
    results[$i]="skipped"
    let skipped=skipped+1
  fi
  let i=i+1
done
let total=i

for ((i=0; i<total; i++))
do
  case ${results[$i]} in
    "passed")
      printf "${clr_passed}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
    "skipped")
      printf "${clr_skipped}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
    "failed")
      printf "${clr_failed}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
  esac
done

if (( failed > 0 ))
then
  exit 1
fi

