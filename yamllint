#!/bin/bash 
# shellcheck disable=1117,2219
#
# Finds all YAML configuration files and checks the header for a pylint 
# directive.  If there is one, executes yamllint against the script and marks
# script as # passed or failed.  If there is no directive, marks the script as
# skipped.  Directives look like this:
#
#   #!/usr/bin/bash
#   # vi: set softtabstop=2 ts=2 sw=2 expandtab:
#   # yamllint
#

# ----------------------------------------------------------------------------
#                                                                  functions
# ----------------------------------------------------------------------------

Usage()
{
  script=$(basename $0)
  cat <<EOF
Usage: $script -h
       $script [-a]
Where:
       -h invokes this usage text
       -a tests all YAML files

By default, this script will find all YAML files in the current directory
and subdirectories, and check for a yamllint directive.  If one is found,
the file will be checked with yamllint.

If "-a" is specified, all files with a .yml or .yaml extension will be 
linted.
EOF
  exit
}

# Check for pylint directive in top of script to determine whether script
# is a candidate.
yamllint_enabled()
{
  awk '
    # default to not finding directive
    BEGIN {
      rc=1
    }

    # find directive (do NOT check for whitespace or whole word; this check
    # does not so for example "# pylint" will be failed out by
    # pylint as a bad directive
    /^# yamllint/ {
      rc=0
      exit
    }

    # quit on blank lines or blank comments
    /^#?\s*$/ {
      exit
    }

    # quit with exit code (necessary because END clauses always executes)
    END {
      exit rc
    }' "$1"
}

# If there is no yamllint executable on this system, we only want to flag as
# a failure if there are candidate scripts (otherwise we'd force projects
# without shell scripts to have yamllint installed in their CI environments
# pointlessly).  This function will be called in the absence of yamllint for
# any scripts that should be checked with yamllint.
noyamllint()
{
  script=$1

  echo "Script $script should be checked by yamllint" >/dev/stderr
  return 128
}

# ----------------------------------------------------------------------------
#                                                             initialization
# ----------------------------------------------------------------------------

# defaults
all=0

# parse arguments
while [ -n "$1" ]
do
  case "$1" in
    "-a")
      all=1
      ;;
    *)
      Usage
      ;;
  esac
  shift
done

# check for yamllint binary
if YAMLLINT=$(which yamllint)
then
  YAMLLINT="$YAMLLINT -s"
  if [ -n "$YAMLLINTRC" ]
  then
    YAMLLINT="$YAMLLINT -c $YAMLLINTRC"
  fi
else
  echo "WARNING: Could not find yamllint; will fail if candidate scripts exist"
  YAMLLINT=noyamllint
fi

# colours are only used in interactive terminal
colours=0
test -t 0 && colours=1

# colours configuration
if (( colours ))
then
  clr_skipped="\\033[33m"
  clr_failed="\\033[31m"
  clr_passed="\\033[32m"
  clr_normal="\\033[39m"
fi

# ----------------------------------------------------------------------------
#                                                                       main
# ----------------------------------------------------------------------------

i=0
skipped=0
passed=0
failed=0

# find every Python script identified by extension
# warning for find disabled; no other way to keep state
# shellcheck disable=2044
for script in $(find . -type f -name \*.yaml -o -name \*.yml -not -path '*/venv/*')
do
  scripts[$i]=$script 
  if (( $all )) || yamllint_enabled $script
  then
    if $YAMLLINT "$script"
    then  
      results[$i]="passed"
      let passed=passed+1
    else 
      results[$i]="failed"
      let failed=failed+1
    fi
  else
    results[$i]="skipped"
    let skipped=skipped+1
  fi
  let i=i+1
done
let total=i

for ((i=0; i<total; i++))
do
  case ${results[$i]} in
    "passed")
      printf "${clr_passed}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
    "skipped")
      printf "${clr_skipped}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
    "failed")
      printf "${clr_failed}% 7s %s${clr_normal}\n" "${results[$i]}" "${scripts[$i]}"
      ;;
  esac
done

if (( failed > 0 ))
then
  exit 1
fi

